/*
 * File: sf_vesc_usb.cpp
 *
 *
 *   --- THIS FILE GENERATED BY S-FUNCTION BUILDER: 3.0 ---
 *
 *   This file is an S-function produced by the S-Function
 *   Builder which only recognizes certain fields.  Changes made
 *   outside these fields will be lost the next time the block is
 *   used to load, edit, and resave this file. This file will be overwritten
 *   by the S-function Builder block. If you want to edit this file by hand, 
 *   you must change it only in the area defined as:  
 *
 *        %%%-SFUNWIZ_defines_Changes_BEGIN
 *        #define NAME 'replacement text' 
 *        %%% SFUNWIZ_defines_Changes_END
 *
 *   DO NOT change NAME--Change the 'replacement text' only.
 *
 *   For better compatibility with the Simulink Coder, the
 *   "wrapper" S-function technique is used.  This is discussed
 *   in the Simulink Coder's Manual in the Chapter titled,
 *   "Wrapper S-functions".
 *
 *  -------------------------------------------------------------------------
 * | See matlabroot/simulink/src/sfuntmpl_doc.c for a more detailed template |
 *  ------------------------------------------------------------------------- 
 *
 * Created: Tue Aug 27 09:09:29 2019
 */

#define S_FUNCTION_LEVEL 2
#define S_FUNCTION_NAME sf_vesc_usb
/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
/* %%%-SFUNWIZ_defines_Changes_BEGIN --- EDIT HERE TO _END */
#define NUM_INPUTS            5
/* Input Port  0 */
#define IN_PORT_0_NAME        slx_mode
#define INPUT_0_WIDTH         1
#define INPUT_DIMS_0_COL      1
#define INPUT_0_DTYPE         uint32_T
#define INPUT_0_COMPLEX       COMPLEX_NO
#define IN_0_FRAME_BASED      FRAME_NO
#define IN_0_BUS_BASED        0
#define IN_0_BUS_NAME         
#define IN_0_DIMS             1-D
#define INPUT_0_FEEDTHROUGH   0
#define IN_0_ISSIGNED         0
#define IN_0_WORDLENGTH       8
#define IN_0_FIXPOINTSCALING  1
#define IN_0_FRACTIONLENGTH   9
#define IN_0_BIAS             0
#define IN_0_SLOPE            0.125
/* Input Port  1 */
#define IN_PORT_1_NAME        slx_pos_cmd
#define INPUT_1_WIDTH         1
#define INPUT_DIMS_1_COL      1
#define INPUT_1_DTYPE         real_T
#define INPUT_1_COMPLEX       COMPLEX_NO
#define IN_1_FRAME_BASED      FRAME_NO
#define IN_1_BUS_BASED        0
#define IN_1_BUS_NAME         
#define IN_1_DIMS             1-D
#define INPUT_1_FEEDTHROUGH   0
#define IN_1_ISSIGNED         0
#define IN_1_WORDLENGTH       8
#define IN_1_FIXPOINTSCALING  1
#define IN_1_FRACTIONLENGTH   9
#define IN_1_BIAS             0
#define IN_1_SLOPE            0.125
/* Input Port  2 */
#define IN_PORT_2_NAME        slx_current_cmd
#define INPUT_2_WIDTH         1
#define INPUT_DIMS_2_COL      1
#define INPUT_2_DTYPE         real_T
#define INPUT_2_COMPLEX       COMPLEX_NO
#define IN_2_FRAME_BASED      FRAME_NO
#define IN_2_BUS_BASED        0
#define IN_2_BUS_NAME         
#define IN_2_DIMS             1-D
#define INPUT_2_FEEDTHROUGH   0
#define IN_2_ISSIGNED         0
#define IN_2_WORDLENGTH       8
#define IN_2_FIXPOINTSCALING  1
#define IN_2_FRACTIONLENGTH   9
#define IN_2_BIAS             0
#define IN_2_SLOPE            0.125
/* Input Port  3 */
#define IN_PORT_3_NAME        slx_pos_pid_gains
#define INPUT_3_WIDTH         5
#define INPUT_DIMS_3_COL      1
#define INPUT_3_DTYPE         real_T
#define INPUT_3_COMPLEX       COMPLEX_NO
#define IN_3_FRAME_BASED      FRAME_NO
#define IN_3_BUS_BASED        0
#define IN_3_BUS_NAME         
#define IN_3_DIMS             1-D
#define INPUT_3_FEEDTHROUGH   0
#define IN_3_ISSIGNED         0
#define IN_3_WORDLENGTH       8
#define IN_3_FIXPOINTSCALING  1
#define IN_3_FRACTIONLENGTH   9
#define IN_3_BIAS             0
#define IN_3_SLOPE            0.125
/* Input Port  4 */
#define IN_PORT_4_NAME        slx_curr_lims
#define INPUT_4_WIDTH         5
#define INPUT_DIMS_4_COL      1
#define INPUT_4_DTYPE         real_T
#define INPUT_4_COMPLEX       COMPLEX_NO
#define IN_4_FRAME_BASED      FRAME_NO
#define IN_4_BUS_BASED        0
#define IN_4_BUS_NAME         
#define IN_4_DIMS             1-D
#define INPUT_4_FEEDTHROUGH   0
#define IN_4_ISSIGNED         0
#define IN_4_WORDLENGTH       8
#define IN_4_FIXPOINTSCALING  1
#define IN_4_FRACTIONLENGTH   9
#define IN_4_BIAS             0
#define IN_4_SLOPE            0.125

#define NUM_OUTPUTS           3
/* Output Port  0 */
#define OUT_PORT_0_NAME       slx_values
#define OUTPUT_0_WIDTH        1
#define OUTPUT_DIMS_0_COL     1
#define OUTPUT_0_DTYPE        real_T
#define OUTPUT_0_COMPLEX      COMPLEX_NO
#define OUT_0_FRAME_BASED     FRAME_NO
#define OUT_0_BUS_BASED       1
#define OUT_0_BUS_NAME        mc_values
#define OUT_0_DIMS            1-D
#define OUT_0_ISSIGNED        1
#define OUT_0_WORDLENGTH      8
#define OUT_0_FIXPOINTSCALING 1
#define OUT_0_FRACTIONLENGTH  3
#define OUT_0_BIAS            0
#define OUT_0_SLOPE           0.125
/* Output Port  1 */
#define OUT_PORT_1_NAME       slx_mcconf
#define OUTPUT_1_WIDTH        1
#define OUTPUT_DIMS_1_COL     1
#define OUTPUT_1_DTYPE        real_T
#define OUTPUT_1_COMPLEX      COMPLEX_NO
#define OUT_1_FRAME_BASED     FRAME_NO
#define OUT_1_BUS_BASED       1
#define OUT_1_BUS_NAME        mc_configuration
#define OUT_1_DIMS            1-D
#define OUT_1_ISSIGNED        1
#define OUT_1_WORDLENGTH      8
#define OUT_1_FIXPOINTSCALING 1
#define OUT_1_FRACTIONLENGTH  3
#define OUT_1_BIAS            0
#define OUT_1_SLOPE           0.125
/* Output Port  2 */
#define OUT_PORT_2_NAME       slx_mcconf_read
#define OUTPUT_2_WIDTH        1
#define OUTPUT_DIMS_2_COL     1
#define OUTPUT_2_DTYPE        boolean_T
#define OUTPUT_2_COMPLEX      COMPLEX_NO
#define OUT_2_FRAME_BASED     FRAME_NO
#define OUT_2_BUS_BASED       0
#define OUT_2_BUS_NAME        
#define OUT_2_DIMS            1-D
#define OUT_2_ISSIGNED        1
#define OUT_2_WORDLENGTH      8
#define OUT_2_FIXPOINTSCALING 1
#define OUT_2_FRACTIONLENGTH  3
#define OUT_2_BIAS            0
#define OUT_2_SLOPE           0.125

#define NPARAMS               1
/* Parameter 0 */
#define PARAMETER_0_NAME      vesc_dev
#define PARAMETER_0_DTYPE     uint8_T
#define PARAMETER_0_COMPLEX   COMPLEX_NO

#define SAMPLE_TIME_0         INHERITED_SAMPLE_TIME
#define NUM_DISC_STATES       1
#define DISC_STATES_IC        [0]
#define NUM_CONT_STATES       0
#define CONT_STATES_IC        [0]

#define SFUNWIZ_GENERATE_TLC  1
#define SOURCEFILES           "__SFB__"
#define PANELINDEX            8
#define USE_SIMSTRUCT         0
#define SHOW_COMPILE_STEPS    0
#define CREATE_DEBUG_MEXFILE  0
#define SAVE_CODE_ONLY        0
#define SFUNWIZ_REVISION      3.0
/* %%%-SFUNWIZ_defines_Changes_END --- EDIT HERE TO _BEGIN */
/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
#include "simstruc.h"
#include "datatypes.h"
/*
 * Code Generation Environment flag (simulation or standalone target).
 */
 static int_T isSimulationTarget;
/* Utility function prototypes. */
static int_T GetRTWEnvironmentMode(SimStruct *S);
/* Macro used to check if Simulation mode is set to accelerator */
#define isBusDWorkPresent  ( ( ( !ssRTWGenIsCodeGen(S) || isSimulationTarget ) && !ssIsExternalSim(S) ) || ssIsRapidAcceleratorActive(S) )

typedef struct {
    int_T offset;
    int_T elemSize;
    int_T numElems;
} busInfoStruct;
#define PARAM_DEF0(S) ssGetSFcnParam(S, 0)

#define IS_PARAM_UINT8(pVal) (mxIsNumeric(pVal) && !mxIsLogical(pVal) &&\
!mxIsEmpty(pVal) && !mxIsSparse(pVal) && !mxIsComplex(pVal) && mxIsUint8(pVal))

extern void sf_vesc_usb_Start_wrapper(real_T *xD,
			void **pW,
			const uint8_T *vesc_dev, const int_T p_width0);
extern void sf_vesc_usb_Outputs_wrapper(mc_values *slx_values,
			mc_configuration *slx_mcconf,
			boolean_T *slx_mcconf_read,
			const real_T *xD,
			void **pW,
			const uint8_T *vesc_dev, const int_T p_width0);
extern void sf_vesc_usb_Update_wrapper(const uint32_T *slx_mode,
			const real_T *slx_pos_cmd,
			const real_T *slx_current_cmd,
			const real_T *slx_pos_pid_gains,
			const real_T *slx_curr_lims,
			mc_values *slx_values,
			mc_configuration *slx_mcconf,
			boolean_T *slx_mcconf_read,
			real_T *xD,
			void **pW,
			const uint8_T *vesc_dev, const int_T p_width0);
extern void sf_vesc_usb_Terminate_wrapper(real_T *xD,
			void **pW,
			const uint8_T *vesc_dev, const int_T p_width0);
/*====================*
 * S-function methods *
 *====================*/
#define MDL_CHECK_PARAMETERS
#if defined(MDL_CHECK_PARAMETERS) && defined(MATLAB_MEX_FILE)
/* Function: mdlCheckParameters =============================================
 * Abstract:
 *     Verify parameter definitions and types.
 */
static void mdlCheckParameters(SimStruct *S)
{
    int paramIndex  = 0;
    bool invalidParam = false;
    /* All parameters must match the S-function Builder Dialog */

    {
        const mxArray *pVal0 = ssGetSFcnParam(S, 0);
        if (!IS_PARAM_UINT8(pVal0)) {
            invalidParam = true;
            paramIndex = 0;
            goto EXIT_POINT;
        }
    }


    EXIT_POINT:
    if (invalidParam) {
        char parameterErrorMsg[1024];
        sprintf(parameterErrorMsg, "The data type and or complexity of parameter %d does not match the "
                "information specified in the S-function Builder dialog. "
                "For non-double parameters you will need to cast them using int8, int16, "
                "int32, uint8, uint16, uint32 or boolean.", paramIndex + 1);
        ssSetErrorStatus(S, parameterErrorMsg);
    }
    return;
}
#endif /* MDL_CHECK_PARAMETERS */
/* Function: mdlInitializeSizes ===============================================
 * Abstract:
 *   Setup sizes of the various vectors.
 */
static void mdlInitializeSizes(SimStruct *S)
{

    DECL_AND_INIT_DIMSINFO(inputDimsInfo);
    DECL_AND_INIT_DIMSINFO(outputDimsInfo);
    ssSetNumSFcnParams(S, NPARAMS); /* Number of expected parameters */
    #if defined(MATLAB_MEX_FILE)
    if (ssGetNumSFcnParams(S) == ssGetSFcnParamsCount(S)) {
        mdlCheckParameters(S);
        if (ssGetErrorStatus(S) != NULL) {
            return;
        }
    } else {
        return; /* Parameter mismatch will be reported by Simulink */
    }
    #endif

    ssSetArrayLayoutForCodeGen(S, SS_COLUMN_MAJOR);

    ssSetSimStateCompliance(S, DISALLOW_SIM_STATE);

    ssSetNumContStates(S, NUM_CONT_STATES);
    ssSetNumDiscStates(S, NUM_DISC_STATES);


    if (!ssSetNumInputPorts(S, NUM_INPUTS)) return;
    /* Input Port 0 */
    ssSetInputPortWidth(S, 0, INPUT_0_WIDTH);
    ssSetInputPortDataType(S, 0, SS_UINT32);
    ssSetInputPortComplexSignal(S, 0, INPUT_0_COMPLEX);
    ssSetInputPortDirectFeedThrough(S, 0, INPUT_0_FEEDTHROUGH);
    ssSetInputPortRequiredContiguous(S, 0, 1); /*direct input signal access*/

    /* Input Port 1 */
    ssSetInputPortWidth(S, 1, INPUT_1_WIDTH);
    ssSetInputPortDataType(S, 1, SS_DOUBLE);
    ssSetInputPortComplexSignal(S, 1, INPUT_1_COMPLEX);
    ssSetInputPortDirectFeedThrough(S, 1, INPUT_1_FEEDTHROUGH);
    ssSetInputPortRequiredContiguous(S, 1, 1); /*direct input signal access*/

    /* Input Port 2 */
    ssSetInputPortWidth(S, 2, INPUT_2_WIDTH);
    ssSetInputPortDataType(S, 2, SS_DOUBLE);
    ssSetInputPortComplexSignal(S, 2, INPUT_2_COMPLEX);
    ssSetInputPortDirectFeedThrough(S, 2, INPUT_2_FEEDTHROUGH);
    ssSetInputPortRequiredContiguous(S, 2, 1); /*direct input signal access*/

    /* Input Port 3 */
    ssSetInputPortWidth(S, 3, INPUT_3_WIDTH);
    ssSetInputPortDataType(S, 3, SS_DOUBLE);
    ssSetInputPortComplexSignal(S, 3, INPUT_3_COMPLEX);
    ssSetInputPortDirectFeedThrough(S, 3, INPUT_3_FEEDTHROUGH);
    ssSetInputPortRequiredContiguous(S, 3, 1); /*direct input signal access*/

    /* Input Port 4 */
    ssSetInputPortWidth(S, 4, INPUT_4_WIDTH);
    ssSetInputPortDataType(S, 4, SS_DOUBLE);
    ssSetInputPortComplexSignal(S, 4, INPUT_4_COMPLEX);
    ssSetInputPortDirectFeedThrough(S, 4, INPUT_4_FEEDTHROUGH);
    ssSetInputPortRequiredContiguous(S, 4, 1); /*direct input signal access*/


    if (!ssSetNumOutputPorts(S, NUM_OUTPUTS)) return;
    /* Output Port 0 */

  /* Register mc_values datatype for Output port 0 */

    #if defined(MATLAB_MEX_FILE)
    if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY)
    {
      DTypeId dataTypeIdReg;
      ssRegisterTypeFromNamedObject(S, "mc_values", &dataTypeIdReg);
      if(dataTypeIdReg == INVALID_DTYPE_ID) return;
        ssSetOutputPortDataType(S, 0, dataTypeIdReg);
    }
    #endif

    ssSetBusOutputObjectName(S, 0, (void *) "mc_values");
    ssSetOutputPortWidth(S, 0, OUTPUT_0_WIDTH);
    ssSetOutputPortComplexSignal(S, 0, OUTPUT_0_COMPLEX);
    ssSetBusOutputAsStruct(S, 0,OUT_0_BUS_BASED);
    ssSetOutputPortBusMode(S, 0, SL_BUS_MODE);
    /* Output Port 1 */

  /* Register mc_configuration datatype for Output port 1 */

    #if defined(MATLAB_MEX_FILE)
    if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY)
    {
      DTypeId dataTypeIdReg;
      ssRegisterTypeFromNamedObject(S, "mc_configuration", &dataTypeIdReg);
      if(dataTypeIdReg == INVALID_DTYPE_ID) return;
        ssSetOutputPortDataType(S, 1, dataTypeIdReg);
    }
    #endif

    ssSetBusOutputObjectName(S, 1, (void *) "mc_configuration");
    ssSetOutputPortWidth(S, 1, OUTPUT_1_WIDTH);
    ssSetOutputPortComplexSignal(S, 1, OUTPUT_1_COMPLEX);
    ssSetBusOutputAsStruct(S, 1,OUT_1_BUS_BASED);
    ssSetOutputPortBusMode(S, 1, SL_BUS_MODE);
    /* Output Port 2 */
    ssSetOutputPortWidth(S, 2, OUTPUT_2_WIDTH);
    ssSetOutputPortDataType(S, 2, SS_BOOLEAN);
    ssSetOutputPortComplexSignal(S, 2, OUTPUT_2_COMPLEX);

    if (ssRTWGenIsCodeGen(S)) {
        isSimulationTarget = GetRTWEnvironmentMode(S);
        if (isSimulationTarget == -1) {
            ssSetErrorStatus(S, " Unable to determine a valid code generation environment mode");
            return;
        }
        isSimulationTarget |= ssRTWGenIsModelReferenceSimTarget(S);
    }
    
    /* Set the number of dworks */
    if (!isBusDWorkPresent) {
        if (!ssSetNumDWork(S, 0)) return;
    } else {
        if (!ssSetNumDWork(S, 2)) return;
    }

    if (isBusDWorkPresent) {

      /*
       * Configure the dwork 0 (slx_valuesBUS)
       */
#if defined(MATLAB_MEX_FILE)
      if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY) {
        DTypeId dataTypeIdReg;
        ssRegisterTypeFromNamedObject(S, "mc_values", &dataTypeIdReg);
        if (dataTypeIdReg == INVALID_DTYPE_ID) return;
        ssSetDWorkDataType(S, 0, dataTypeIdReg);
      }
#endif
      
      ssSetDWorkUsageType(S, 0, SS_DWORK_USED_AS_DWORK);
      ssSetDWorkName(S, 0, "slx_valuesBUS");
      ssSetDWorkWidth(S, 0, DYNAMICALLY_SIZED);
      ssSetDWorkComplexSignal(S, 0, COMPLEX_NO);

      /*
       * Configure the dwork 1 (slx_mcconfBUS)
       */
#if defined(MATLAB_MEX_FILE)
      if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY) {
        DTypeId dataTypeIdReg;
        ssRegisterTypeFromNamedObject(S, "mc_configuration", &dataTypeIdReg);
        if (dataTypeIdReg == INVALID_DTYPE_ID) return;
        ssSetDWorkDataType(S, 1, dataTypeIdReg);
      }
#endif
      
      ssSetDWorkUsageType(S, 1, SS_DWORK_USED_AS_DWORK);
      ssSetDWorkName(S, 1, "slx_mcconfBUS");
      ssSetDWorkWidth(S, 1, DYNAMICALLY_SIZED);
      ssSetDWorkComplexSignal(S, 1, COMPLEX_NO);
    }
    ssSetNumPWork(S, 1);

    ssSetNumSampleTimes(S, 1);
    ssSetNumRWork(S, 0);
    ssSetNumIWork(S, 0);
    ssSetNumModes(S, 0);
    ssSetNumNonsampledZCs(S, 0);

    ssSetSimulinkVersionGeneratedIn(S, "9.2");

    /* Take care when specifying exception free code - see sfuntmpl_doc.c */
    ssSetOptions(S, (SS_OPTION_EXCEPTION_FREE_CODE |
                     SS_OPTION_USE_TLC_WITH_ACCELERATOR |
                     SS_OPTION_WORKS_WITH_CODE_REUSE));
}

/* Function: mdlInitializeSampleTimes =========================================
 * Abstract:
 *    Specifiy  the sample time.
 */
static void mdlInitializeSampleTimes(SimStruct *S)
{
    ssSetSampleTime(S, 0, SAMPLE_TIME_0);
    ssSetModelReferenceSampleTimeDefaultInheritance(S);
    ssSetOffsetTime(S, 0, 0.0);
}
#define MDL_INITIALIZE_CONDITIONS
/* Function: mdlInitializeConditions ========================================
 * Abstract:
 *    Initialize the states
 */
static void mdlInitializeConditions(SimStruct *S)
{
    real_T *xD = ssGetRealDiscStates(S);

    /* Warning: parameters not of type double used as IC will be replaced with 0.0 */

    xD[0] = 0;
}

#define MDL_SET_INPUT_PORT_DATA_TYPE
static void mdlSetInputPortDataType(SimStruct *S, int port, DTypeId dType)
{
    ssSetInputPortDataType(S, 0, dType);
}

#define MDL_SET_OUTPUT_PORT_DATA_TYPE
static void mdlSetOutputPortDataType(SimStruct *S, int port, DTypeId dType)
{
    ssSetOutputPortDataType(S, 0, dType);
}

#define MDL_SET_DEFAULT_PORT_DATA_TYPES
static void mdlSetDefaultPortDataTypes(SimStruct *S)
{
    ssSetInputPortDataType(S, 0, SS_DOUBLE);
    ssSetOutputPortDataType(S, 0, SS_DOUBLE);
}

#define MDL_SET_WORK_WIDTHS
#if defined(MDL_SET_WORK_WIDTHS) && defined(MATLAB_MEX_FILE)

static void mdlSetWorkWidths(SimStruct *S)
{
/* Set the width of DWork(s) used for marshalling the IOs */
    if (isBusDWorkPresent) {

        /* Update dwork 0 */
        ssSetDWorkWidth(S, 0, ssGetOutputPortWidth(S, 0));

        /* Update dwork 1 */
        ssSetDWorkWidth(S, 1, ssGetOutputPortWidth(S, 1));

    }

    {

    const char_T *rtParamNames[] = {"P1"};
    ssRegAllTunableParamsAsRunTimeParams(S, rtParamNames);

    }
}

#endif

#define MDL_START  /* Change to #undef to remove function */
#if defined(MDL_START)
/* Function: mdlStart =======================================================
 * Abstract:
 *    This function is called once at start of model execution. If you
 *    have states that should be initialized once, this is the place
 *    to do it.
 */
static void mdlStart(SimStruct *S)
{
    /* Bus Information */
    slDataTypeAccess *dta = ssGetDataTypeAccess(S);
    const char *bpath = ssGetPath(S);
	DTypeId mc_configurationId = ssGetDataTypeId(S, "mc_configuration");
	DTypeId mc_valuesId = ssGetDataTypeId(S, "mc_values");

	busInfoStruct *busInfo = (busInfoStruct *)malloc(276*sizeof(busInfoStruct));
	if(busInfo==NULL) {
        ssSetErrorStatus(S, "Memory allocation failure");
        return;
    }

      /* Calculate offsets of all primitive elements of the bus */

	busInfo[0].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 0);
	busInfo[0].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[0].numElems = 1;
	busInfo[1].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 1);
	busInfo[1].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[1].numElems = 1;
	busInfo[2].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 2);
	busInfo[2].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[2].numElems = 1;
	busInfo[3].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 3);
	busInfo[3].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[3].numElems = 1;
	busInfo[4].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 4);
	busInfo[4].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "uint16"));
	busInfo[4].numElems = 1;
	busInfo[5].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 5);
	busInfo[5].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[5].numElems = 1;
	busInfo[6].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 6);
	busInfo[6].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[6].numElems = 1;
	busInfo[7].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 7);
	busInfo[7].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[7].numElems = 1;
	busInfo[8].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 8);
	busInfo[8].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[8].numElems = 1;
	busInfo[9].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 9);
	busInfo[9].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[9].numElems = 1;
	busInfo[10].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 10);
	busInfo[10].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[10].numElems = 1;
	busInfo[11].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 11);
	busInfo[11].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[11].numElems = 1;
	busInfo[12].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 12);
	busInfo[12].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[12].numElems = 1;
	busInfo[13].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 13);
	busInfo[13].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[13].numElems = 1;
	busInfo[14].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 14);
	busInfo[14].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[14].numElems = 1;
	busInfo[15].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 15);
	busInfo[15].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[15].numElems = 1;
	busInfo[16].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 16);
	busInfo[16].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[16].numElems = 1;
	busInfo[17].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 17);
	busInfo[17].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[17].numElems = 1;
	busInfo[18].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 18);
	busInfo[18].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[18].numElems = 1;
	busInfo[19].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 19);
	busInfo[19].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[19].numElems = 1;
	busInfo[20].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 20);
	busInfo[20].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[20].numElems = 1;
	busInfo[21].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 21);
	busInfo[21].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "int32"));
	busInfo[21].numElems = 1;
	busInfo[22].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 22);
	busInfo[22].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "int32"));
	busInfo[22].numElems = 1;
	busInfo[23].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_valuesId, 23);
	busInfo[23].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "mc_fault_code"));
	busInfo[23].numElems = 1;
	busInfo[24].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 0);
	busInfo[24].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "mc_pwm_mode"));
	busInfo[24].numElems = 1;
	busInfo[25].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 1);
	busInfo[25].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "mc_comm_mode"));
	busInfo[25].numElems = 1;
	busInfo[26].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 2);
	busInfo[26].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "mc_motor_type"));
	busInfo[26].numElems = 1;
	busInfo[27].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 3);
	busInfo[27].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "mc_sensor_mode"));
	busInfo[27].numElems = 1;
	busInfo[28].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 4);
	busInfo[28].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[28].numElems = 1;
	busInfo[29].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 5);
	busInfo[29].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[29].numElems = 1;
	busInfo[30].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 6);
	busInfo[30].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[30].numElems = 1;
	busInfo[31].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 7);
	busInfo[31].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[31].numElems = 1;
	busInfo[32].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 8);
	busInfo[32].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[32].numElems = 1;
	busInfo[33].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 9);
	busInfo[33].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[33].numElems = 1;
	busInfo[34].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 10);
	busInfo[34].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[34].numElems = 1;
	busInfo[35].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 11);
	busInfo[35].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[35].numElems = 1;
	busInfo[36].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 12);
	busInfo[36].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[36].numElems = 1;
	busInfo[37].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 13);
	busInfo[37].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[37].numElems = 1;
	busInfo[38].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 14);
	busInfo[38].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[38].numElems = 1;
	busInfo[39].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 15);
	busInfo[39].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[39].numElems = 1;
	busInfo[40].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 16);
	busInfo[40].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[40].numElems = 1;
	busInfo[41].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 17);
	busInfo[41].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[41].numElems = 1;
	busInfo[42].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 18);
	busInfo[42].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "boolean"));
	busInfo[42].numElems = 1;
	busInfo[43].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 19);
	busInfo[43].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[43].numElems = 1;
	busInfo[44].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 20);
	busInfo[44].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[44].numElems = 1;
	busInfo[45].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 21);
	busInfo[45].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[45].numElems = 1;
	busInfo[46].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 22);
	busInfo[46].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[46].numElems = 1;
	busInfo[47].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 23);
	busInfo[47].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[47].numElems = 1;
	busInfo[48].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 24);
	busInfo[48].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[48].numElems = 1;
	busInfo[49].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 25);
	busInfo[49].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[49].numElems = 1;
	busInfo[50].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 26);
	busInfo[50].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[50].numElems = 1;
	busInfo[51].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 27);
	busInfo[51].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[51].numElems = 1;
	busInfo[52].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 28);
	busInfo[52].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[52].numElems = 1;
	busInfo[53].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 29);
	busInfo[53].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[53].numElems = 1;
	busInfo[54].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 30);
	busInfo[54].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[54].numElems = 1;
	busInfo[55].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 31);
	busInfo[55].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[55].numElems = 1;
	busInfo[56].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 32);
	busInfo[56].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[56].numElems = 1;
	busInfo[57].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 33);
	busInfo[57].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[57].numElems = 1;
	busInfo[58].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 34);
	busInfo[58].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[58].numElems = 1;
	busInfo[59].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 35);
	busInfo[59].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[59].numElems = 1;
	busInfo[60].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 36);
	busInfo[60].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[60].numElems = 1;
	busInfo[61].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 37);
	busInfo[61].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[61].numElems = 1;
	busInfo[62].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 38);
	busInfo[62].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[62].numElems = 1;
	busInfo[63].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 39);
	busInfo[63].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[63].numElems = 1;
	busInfo[64].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 40);
	busInfo[64].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[64].numElems = 1;
	busInfo[65].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 41);
	busInfo[65].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[65].numElems = 1;
	busInfo[66].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 42);
	busInfo[66].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[66].numElems = 1;
	busInfo[67].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 43);
	busInfo[67].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "int8"));
	busInfo[67].numElems = 8;
	busInfo[68].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 44);
	busInfo[68].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[68].numElems = 1;
	busInfo[69].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 45);
	busInfo[69].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[69].numElems = 1;
	busInfo[70].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 46);
	busInfo[70].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[70].numElems = 1;
	busInfo[71].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 47);
	busInfo[71].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[71].numElems = 1;
	busInfo[72].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 48);
	busInfo[72].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[72].numElems = 1;
	busInfo[73].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 49);
	busInfo[73].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[73].numElems = 1;
	busInfo[74].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 50);
	busInfo[74].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "boolean"));
	busInfo[74].numElems = 1;
	busInfo[75].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 51);
	busInfo[75].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[75].numElems = 1;
	busInfo[76].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 52);
	busInfo[76].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[76].numElems = 1;
	busInfo[77].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 53);
	busInfo[77].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[77].numElems = 1;
	busInfo[78].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 54);
	busInfo[78].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[78].numElems = 1;
	busInfo[79].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 55);
	busInfo[79].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[79].numElems = 1;
	busInfo[80].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 56);
	busInfo[80].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[80].numElems = 1;
	busInfo[81].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 57);
	busInfo[81].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[81].numElems = 1;
	busInfo[82].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 58);
	busInfo[82].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[82].numElems = 1;
	busInfo[83].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 59);
	busInfo[83].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[83].numElems = 1;
	busInfo[84].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 60);
	busInfo[84].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[84].numElems = 1;
	busInfo[85].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 61);
	busInfo[85].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[85].numElems = 1;
	busInfo[86].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 62);
	busInfo[86].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[86].numElems = 1;
	busInfo[87].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 63);
	busInfo[87].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[87].numElems = 1;
	busInfo[88].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 64);
	busInfo[88].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[88].numElems = 1;
	busInfo[89].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 65);
	busInfo[89].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[89].numElems = 1;
	busInfo[90].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 66);
	busInfo[90].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "mc_foc_sensor_mode"));
	busInfo[90].numElems = 1;
	busInfo[91].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 67);
	busInfo[91].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "uint8"));
	busInfo[91].numElems = 8;
	busInfo[92].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 68);
	busInfo[92].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[92].numElems = 1;
	busInfo[93].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 69);
	busInfo[93].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "boolean"));
	busInfo[93].numElems = 1;
	busInfo[94].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 70);
	busInfo[94].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "boolean"));
	busInfo[94].numElems = 1;
	busInfo[95].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 71);
	busInfo[95].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[95].numElems = 1;
	busInfo[96].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 72);
	busInfo[96].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "boolean"));
	busInfo[96].numElems = 1;
	busInfo[97].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 73);
	busInfo[97].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[97].numElems = 1;
	busInfo[98].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 74);
	busInfo[98].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[98].numElems = 1;
	busInfo[99].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 75);
	busInfo[99].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "int32"));
	busInfo[99].numElems = 1;
	busInfo[100].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 76);
	busInfo[100].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "int32"));
	busInfo[100].numElems = 1;
	busInfo[101].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 77);
	busInfo[101].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[101].numElems = 1;
	busInfo[102].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 78);
	busInfo[102].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[102].numElems = 1;
	busInfo[103].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 79);
	busInfo[103].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[103].numElems = 1;
	busInfo[104].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 80);
	busInfo[104].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[104].numElems = 1;
	busInfo[105].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 81);
	busInfo[105].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[105].numElems = 1;
	busInfo[106].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 82);
	busInfo[106].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[106].numElems = 1;
	busInfo[107].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 83);
	busInfo[107].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[107].numElems = 1;
	busInfo[108].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 84);
	busInfo[108].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[108].numElems = 1;
	busInfo[109].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 85);
	busInfo[109].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "boolean"));
	busInfo[109].numElems = 1;
	busInfo[110].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 86);
	busInfo[110].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[110].numElems = 1;
	busInfo[111].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 87);
	busInfo[111].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[111].numElems = 1;
	busInfo[112].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 88);
	busInfo[112].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[112].numElems = 1;
	busInfo[113].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 89);
	busInfo[113].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[113].numElems = 1;
	busInfo[114].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 90);
	busInfo[114].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[114].numElems = 1;
	busInfo[115].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 91);
	busInfo[115].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[115].numElems = 1;
	busInfo[116].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 92);
	busInfo[116].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[116].numElems = 1;
	busInfo[117].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 93);
	busInfo[117].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[117].numElems = 1;
	busInfo[118].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 94);
	busInfo[118].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[118].numElems = 1;
	busInfo[119].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 95);
	busInfo[119].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "int32"));
	busInfo[119].numElems = 1;
	busInfo[120].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 96);
	busInfo[120].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[120].numElems = 1;
	busInfo[121].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 97);
	busInfo[121].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[121].numElems = 1;
	busInfo[122].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 98);
	busInfo[122].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "uint32"));
	busInfo[122].numElems = 1;
	busInfo[123].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 99);
	busInfo[123].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "sensor_port_mode"));
	busInfo[123].numElems = 1;
	busInfo[124].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 100);
	busInfo[124].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "boolean"));
	busInfo[124].numElems = 1;
	busInfo[125].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 101);
	busInfo[125].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "drv8301_oc_mode"));
	busInfo[125].numElems = 1;
	busInfo[126].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 102);
	busInfo[126].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "int32"));
	busInfo[126].numElems = 1;
	busInfo[127].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 103);
	busInfo[127].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[127].numElems = 1;
	busInfo[128].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 104);
	busInfo[128].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[128].numElems = 1;
	busInfo[129].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 105);
	busInfo[129].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[129].numElems = 1;
	busInfo[130].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 106);
	busInfo[130].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[130].numElems = 1;
	busInfo[131].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 107);
	busInfo[131].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "out_aux_mode"));
	busInfo[131].numElems = 1;
	busInfo[132].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 108);
	busInfo[132].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "uint8"));
	busInfo[132].numElems = 1;
	busInfo[133].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 109);
	busInfo[133].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[133].numElems = 1;
	busInfo[134].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 110);
	busInfo[134].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[134].numElems = 1;
	busInfo[135].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 111);
	busInfo[135].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "BATTERY_TYPE"));
	busInfo[135].numElems = 1;
	busInfo[136].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 112);
	busInfo[136].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "int32"));
	busInfo[136].numElems = 1;
	busInfo[137].offset   = dtaGetDataTypeElementOffset(dta, bpath, mc_configurationId, 113);
	busInfo[137].elemSize = dtaGetDataTypeSize(dta, bpath, ssGetDataTypeId(S, "single"));
	busInfo[137].numElems = 1;
	ssSetUserData(S, busInfo);
    void **pW = ssGetPWork(S);
    real_T *xD = ssGetDiscStates(S);
    const int_T   p_width0  = mxGetNumberOfElements(PARAM_DEF0(S));
    const uint8_T *vesc_dev = (const uint8_T *) mxGetData(PARAM_DEF0(S));
    
    sf_vesc_usb_Start_wrapper(xD, pW, vesc_dev, p_width0);
}
#endif /*  MDL_START */

/* Function: mdlOutputs =======================================================
 *
 */
static void mdlOutputs(SimStruct *S, int_T tid)
{
    void **pW = ssGetPWork(S);
    char *slx_values = (char *) ssGetOutputPortSignal(S, 0);
    char *slx_mcconf = (char *) ssGetOutputPortSignal(S, 1);
    boolean_T *slx_mcconf_read = (boolean_T *) ssGetOutputPortRealSignal(S, 2);
    const real_T *xD = ssGetDiscStates(S);
    const int_T   p_width0  = mxGetNumberOfElements(PARAM_DEF0(S));
    const uint8_T *vesc_dev = (const uint8_T *) mxGetData(PARAM_DEF0(S));
    
	busInfoStruct* busInfo = (busInfoStruct *) ssGetUserData(S);

	/* Temporary bus copy declarations */
	mc_values _slx_valuesBUS;
	mc_configuration _slx_mcconfBUS;

	/* Copy input bus into temporary structure */

    sf_vesc_usb_Outputs_wrapper(&_slx_valuesBUS, &_slx_mcconfBUS, slx_mcconf_read, xD, pW, vesc_dev, p_width0);

	/* Copy temporary structure into output bus */
	(void) memcpy(slx_values + busInfo[0].offset, &_slx_valuesBUS.v_in, busInfo[0].elemSize * busInfo[0].numElems);
	(void) memcpy(slx_values + busInfo[1].offset, &_slx_valuesBUS.id, busInfo[1].elemSize * busInfo[1].numElems);
	(void) memcpy(slx_values + busInfo[2].offset, &_slx_valuesBUS.iq, busInfo[2].elemSize * busInfo[2].numElems);
	(void) memcpy(slx_values + busInfo[3].offset, &_slx_valuesBUS.pid_pos, busInfo[3].elemSize * busInfo[3].numElems);
	(void) memcpy(slx_values + busInfo[4].offset, &_slx_valuesBUS.vesc_id, busInfo[4].elemSize * busInfo[4].numElems);
	(void) memcpy(slx_values + busInfo[5].offset, &_slx_valuesBUS.temp_motor, busInfo[5].elemSize * busInfo[5].numElems);
	(void) memcpy(slx_values + busInfo[6].offset, &_slx_valuesBUS.temp_mos1, busInfo[6].elemSize * busInfo[6].numElems);
	(void) memcpy(slx_values + busInfo[7].offset, &_slx_valuesBUS.temp_mos2, busInfo[7].elemSize * busInfo[7].numElems);
	(void) memcpy(slx_values + busInfo[8].offset, &_slx_valuesBUS.temp_mos3, busInfo[8].elemSize * busInfo[8].numElems);
	(void) memcpy(slx_values + busInfo[9].offset, &_slx_valuesBUS.temp_mos4, busInfo[9].elemSize * busInfo[9].numElems);
	(void) memcpy(slx_values + busInfo[10].offset, &_slx_valuesBUS.temp_mos5, busInfo[10].elemSize * busInfo[10].numElems);
	(void) memcpy(slx_values + busInfo[11].offset, &_slx_valuesBUS.temp_mos6, busInfo[11].elemSize * busInfo[11].numElems);
	(void) memcpy(slx_values + busInfo[12].offset, &_slx_valuesBUS.temp_pcb, busInfo[12].elemSize * busInfo[12].numElems);
	(void) memcpy(slx_values + busInfo[13].offset, &_slx_valuesBUS.current_motor, busInfo[13].elemSize * busInfo[13].numElems);
	(void) memcpy(slx_values + busInfo[14].offset, &_slx_valuesBUS.current_in, busInfo[14].elemSize * busInfo[14].numElems);
	(void) memcpy(slx_values + busInfo[15].offset, &_slx_valuesBUS.rpm, busInfo[15].elemSize * busInfo[15].numElems);
	(void) memcpy(slx_values + busInfo[16].offset, &_slx_valuesBUS.duty_now, busInfo[16].elemSize * busInfo[16].numElems);
	(void) memcpy(slx_values + busInfo[17].offset, &_slx_valuesBUS.amp_hours, busInfo[17].elemSize * busInfo[17].numElems);
	(void) memcpy(slx_values + busInfo[18].offset, &_slx_valuesBUS.amp_hours_charged, busInfo[18].elemSize * busInfo[18].numElems);
	(void) memcpy(slx_values + busInfo[19].offset, &_slx_valuesBUS.watt_hours, busInfo[19].elemSize * busInfo[19].numElems);
	(void) memcpy(slx_values + busInfo[20].offset, &_slx_valuesBUS.watt_hours_charged, busInfo[20].elemSize * busInfo[20].numElems);
	(void) memcpy(slx_values + busInfo[21].offset, &_slx_valuesBUS.tachometer, busInfo[21].elemSize * busInfo[21].numElems);
	(void) memcpy(slx_values + busInfo[22].offset, &_slx_valuesBUS.tachometer_abs, busInfo[22].elemSize * busInfo[22].numElems);
	(void) memcpy(slx_values + busInfo[23].offset, &_slx_valuesBUS.fault_code, busInfo[23].elemSize * busInfo[23].numElems);
	(void) memcpy(slx_mcconf + busInfo[24].offset, &_slx_mcconfBUS.pwm_mode, busInfo[24].elemSize * busInfo[24].numElems);
	(void) memcpy(slx_mcconf + busInfo[25].offset, &_slx_mcconfBUS.comm_mode, busInfo[25].elemSize * busInfo[25].numElems);
	(void) memcpy(slx_mcconf + busInfo[26].offset, &_slx_mcconfBUS.motor_type, busInfo[26].elemSize * busInfo[26].numElems);
	(void) memcpy(slx_mcconf + busInfo[27].offset, &_slx_mcconfBUS.sensor_mode, busInfo[27].elemSize * busInfo[27].numElems);
	(void) memcpy(slx_mcconf + busInfo[28].offset, &_slx_mcconfBUS.l_current_max, busInfo[28].elemSize * busInfo[28].numElems);
	(void) memcpy(slx_mcconf + busInfo[29].offset, &_slx_mcconfBUS.l_current_min, busInfo[29].elemSize * busInfo[29].numElems);
	(void) memcpy(slx_mcconf + busInfo[30].offset, &_slx_mcconfBUS.l_in_current_max, busInfo[30].elemSize * busInfo[30].numElems);
	(void) memcpy(slx_mcconf + busInfo[31].offset, &_slx_mcconfBUS.l_in_current_min, busInfo[31].elemSize * busInfo[31].numElems);
	(void) memcpy(slx_mcconf + busInfo[32].offset, &_slx_mcconfBUS.l_abs_current_max, busInfo[32].elemSize * busInfo[32].numElems);
	(void) memcpy(slx_mcconf + busInfo[33].offset, &_slx_mcconfBUS.l_min_erpm, busInfo[33].elemSize * busInfo[33].numElems);
	(void) memcpy(slx_mcconf + busInfo[34].offset, &_slx_mcconfBUS.l_max_erpm, busInfo[34].elemSize * busInfo[34].numElems);
	(void) memcpy(slx_mcconf + busInfo[35].offset, &_slx_mcconfBUS.l_erpm_start, busInfo[35].elemSize * busInfo[35].numElems);
	(void) memcpy(slx_mcconf + busInfo[36].offset, &_slx_mcconfBUS.l_max_erpm_fbrake, busInfo[36].elemSize * busInfo[36].numElems);
	(void) memcpy(slx_mcconf + busInfo[37].offset, &_slx_mcconfBUS.l_max_erpm_fbrake_cc, busInfo[37].elemSize * busInfo[37].numElems);
	(void) memcpy(slx_mcconf + busInfo[38].offset, &_slx_mcconfBUS.l_min_vin, busInfo[38].elemSize * busInfo[38].numElems);
	(void) memcpy(slx_mcconf + busInfo[39].offset, &_slx_mcconfBUS.l_max_vin, busInfo[39].elemSize * busInfo[39].numElems);
	(void) memcpy(slx_mcconf + busInfo[40].offset, &_slx_mcconfBUS.l_battery_cut_start, busInfo[40].elemSize * busInfo[40].numElems);
	(void) memcpy(slx_mcconf + busInfo[41].offset, &_slx_mcconfBUS.l_battery_cut_end, busInfo[41].elemSize * busInfo[41].numElems);
	(void) memcpy(slx_mcconf + busInfo[42].offset, &_slx_mcconfBUS.l_slow_abs_current, busInfo[42].elemSize * busInfo[42].numElems);
	(void) memcpy(slx_mcconf + busInfo[43].offset, &_slx_mcconfBUS.l_temp_fet_start, busInfo[43].elemSize * busInfo[43].numElems);
	(void) memcpy(slx_mcconf + busInfo[44].offset, &_slx_mcconfBUS.l_temp_fet_end, busInfo[44].elemSize * busInfo[44].numElems);
	(void) memcpy(slx_mcconf + busInfo[45].offset, &_slx_mcconfBUS.l_temp_motor_start, busInfo[45].elemSize * busInfo[45].numElems);
	(void) memcpy(slx_mcconf + busInfo[46].offset, &_slx_mcconfBUS.l_temp_motor_end, busInfo[46].elemSize * busInfo[46].numElems);
	(void) memcpy(slx_mcconf + busInfo[47].offset, &_slx_mcconfBUS.l_temp_accel_dec, busInfo[47].elemSize * busInfo[47].numElems);
	(void) memcpy(slx_mcconf + busInfo[48].offset, &_slx_mcconfBUS.l_min_duty, busInfo[48].elemSize * busInfo[48].numElems);
	(void) memcpy(slx_mcconf + busInfo[49].offset, &_slx_mcconfBUS.l_max_duty, busInfo[49].elemSize * busInfo[49].numElems);
	(void) memcpy(slx_mcconf + busInfo[50].offset, &_slx_mcconfBUS.l_watt_max, busInfo[50].elemSize * busInfo[50].numElems);
	(void) memcpy(slx_mcconf + busInfo[51].offset, &_slx_mcconfBUS.l_watt_min, busInfo[51].elemSize * busInfo[51].numElems);
	(void) memcpy(slx_mcconf + busInfo[52].offset, &_slx_mcconfBUS.l_current_max_scale, busInfo[52].elemSize * busInfo[52].numElems);
	(void) memcpy(slx_mcconf + busInfo[53].offset, &_slx_mcconfBUS.l_current_min_scale, busInfo[53].elemSize * busInfo[53].numElems);
	(void) memcpy(slx_mcconf + busInfo[54].offset, &_slx_mcconfBUS.lo_current_max, busInfo[54].elemSize * busInfo[54].numElems);
	(void) memcpy(slx_mcconf + busInfo[55].offset, &_slx_mcconfBUS.lo_current_min, busInfo[55].elemSize * busInfo[55].numElems);
	(void) memcpy(slx_mcconf + busInfo[56].offset, &_slx_mcconfBUS.lo_in_current_max, busInfo[56].elemSize * busInfo[56].numElems);
	(void) memcpy(slx_mcconf + busInfo[57].offset, &_slx_mcconfBUS.lo_in_current_min, busInfo[57].elemSize * busInfo[57].numElems);
	(void) memcpy(slx_mcconf + busInfo[58].offset, &_slx_mcconfBUS.lo_current_motor_max_now, busInfo[58].elemSize * busInfo[58].numElems);
	(void) memcpy(slx_mcconf + busInfo[59].offset, &_slx_mcconfBUS.lo_current_motor_min_now, busInfo[59].elemSize * busInfo[59].numElems);
	(void) memcpy(slx_mcconf + busInfo[60].offset, &_slx_mcconfBUS.sl_min_erpm, busInfo[60].elemSize * busInfo[60].numElems);
	(void) memcpy(slx_mcconf + busInfo[61].offset, &_slx_mcconfBUS.sl_min_erpm_cycle_int_limit, busInfo[61].elemSize * busInfo[61].numElems);
	(void) memcpy(slx_mcconf + busInfo[62].offset, &_slx_mcconfBUS.sl_max_fullbreak_current_dir_change, busInfo[62].elemSize * busInfo[62].numElems);
	(void) memcpy(slx_mcconf + busInfo[63].offset, &_slx_mcconfBUS.sl_cycle_int_limit, busInfo[63].elemSize * busInfo[63].numElems);
	(void) memcpy(slx_mcconf + busInfo[64].offset, &_slx_mcconfBUS.sl_phase_advance_at_br, busInfo[64].elemSize * busInfo[64].numElems);
	(void) memcpy(slx_mcconf + busInfo[65].offset, &_slx_mcconfBUS.sl_cycle_int_rpm_br, busInfo[65].elemSize * busInfo[65].numElems);
	(void) memcpy(slx_mcconf + busInfo[66].offset, &_slx_mcconfBUS.sl_bemf_coupling_k, busInfo[66].elemSize * busInfo[66].numElems);
	(void) memcpy(slx_mcconf + busInfo[67].offset, _slx_mcconfBUS.hall_table, busInfo[67].elemSize * busInfo[67].numElems);
	(void) memcpy(slx_mcconf + busInfo[68].offset, &_slx_mcconfBUS.hall_sl_erpm, busInfo[68].elemSize * busInfo[68].numElems);
	(void) memcpy(slx_mcconf + busInfo[69].offset, &_slx_mcconfBUS.foc_current_kp, busInfo[69].elemSize * busInfo[69].numElems);
	(void) memcpy(slx_mcconf + busInfo[70].offset, &_slx_mcconfBUS.foc_current_ki, busInfo[70].elemSize * busInfo[70].numElems);
	(void) memcpy(slx_mcconf + busInfo[71].offset, &_slx_mcconfBUS.foc_f_sw, busInfo[71].elemSize * busInfo[71].numElems);
	(void) memcpy(slx_mcconf + busInfo[72].offset, &_slx_mcconfBUS.foc_dt_us, busInfo[72].elemSize * busInfo[72].numElems);
	(void) memcpy(slx_mcconf + busInfo[73].offset, &_slx_mcconfBUS.foc_encoder_offset, busInfo[73].elemSize * busInfo[73].numElems);
	(void) memcpy(slx_mcconf + busInfo[74].offset, &_slx_mcconfBUS.foc_encoder_inverted, busInfo[74].elemSize * busInfo[74].numElems);
	(void) memcpy(slx_mcconf + busInfo[75].offset, &_slx_mcconfBUS.foc_encoder_ratio, busInfo[75].elemSize * busInfo[75].numElems);
	(void) memcpy(slx_mcconf + busInfo[76].offset, &_slx_mcconfBUS.foc_motor_l, busInfo[76].elemSize * busInfo[76].numElems);
	(void) memcpy(slx_mcconf + busInfo[77].offset, &_slx_mcconfBUS.foc_motor_r, busInfo[77].elemSize * busInfo[77].numElems);
	(void) memcpy(slx_mcconf + busInfo[78].offset, &_slx_mcconfBUS.foc_motor_flux_linkage, busInfo[78].elemSize * busInfo[78].numElems);
	(void) memcpy(slx_mcconf + busInfo[79].offset, &_slx_mcconfBUS.foc_observer_gain, busInfo[79].elemSize * busInfo[79].numElems);
	(void) memcpy(slx_mcconf + busInfo[80].offset, &_slx_mcconfBUS.foc_observer_gain_slow, busInfo[80].elemSize * busInfo[80].numElems);
	(void) memcpy(slx_mcconf + busInfo[81].offset, &_slx_mcconfBUS.foc_pll_kp, busInfo[81].elemSize * busInfo[81].numElems);
	(void) memcpy(slx_mcconf + busInfo[82].offset, &_slx_mcconfBUS.foc_pll_ki, busInfo[82].elemSize * busInfo[82].numElems);
	(void) memcpy(slx_mcconf + busInfo[83].offset, &_slx_mcconfBUS.foc_duty_dowmramp_kp, busInfo[83].elemSize * busInfo[83].numElems);
	(void) memcpy(slx_mcconf + busInfo[84].offset, &_slx_mcconfBUS.foc_duty_dowmramp_ki, busInfo[84].elemSize * busInfo[84].numElems);
	(void) memcpy(slx_mcconf + busInfo[85].offset, &_slx_mcconfBUS.foc_openloop_rpm, busInfo[85].elemSize * busInfo[85].numElems);
	(void) memcpy(slx_mcconf + busInfo[86].offset, &_slx_mcconfBUS.foc_sl_openloop_hyst, busInfo[86].elemSize * busInfo[86].numElems);
	(void) memcpy(slx_mcconf + busInfo[87].offset, &_slx_mcconfBUS.foc_sl_openloop_time, busInfo[87].elemSize * busInfo[87].numElems);
	(void) memcpy(slx_mcconf + busInfo[88].offset, &_slx_mcconfBUS.foc_sl_d_current_duty, busInfo[88].elemSize * busInfo[88].numElems);
	(void) memcpy(slx_mcconf + busInfo[89].offset, &_slx_mcconfBUS.foc_sl_d_current_factor, busInfo[89].elemSize * busInfo[89].numElems);
	(void) memcpy(slx_mcconf + busInfo[90].offset, &_slx_mcconfBUS.foc_sensor_mode, busInfo[90].elemSize * busInfo[90].numElems);
	(void) memcpy(slx_mcconf + busInfo[91].offset, _slx_mcconfBUS.foc_hall_table, busInfo[91].elemSize * busInfo[91].numElems);
	(void) memcpy(slx_mcconf + busInfo[92].offset, &_slx_mcconfBUS.foc_sl_erpm, busInfo[92].elemSize * busInfo[92].numElems);
	(void) memcpy(slx_mcconf + busInfo[93].offset, &_slx_mcconfBUS.foc_sample_v0_v7, busInfo[93].elemSize * busInfo[93].numElems);
	(void) memcpy(slx_mcconf + busInfo[94].offset, &_slx_mcconfBUS.foc_sample_high_current, busInfo[94].elemSize * busInfo[94].numElems);
	(void) memcpy(slx_mcconf + busInfo[95].offset, &_slx_mcconfBUS.foc_sat_comp, busInfo[95].elemSize * busInfo[95].numElems);
	(void) memcpy(slx_mcconf + busInfo[96].offset, &_slx_mcconfBUS.foc_temp_comp, busInfo[96].elemSize * busInfo[96].numElems);
	(void) memcpy(slx_mcconf + busInfo[97].offset, &_slx_mcconfBUS.foc_temp_comp_base_temp, busInfo[97].elemSize * busInfo[97].numElems);
	(void) memcpy(slx_mcconf + busInfo[98].offset, &_slx_mcconfBUS.foc_current_filter_const, busInfo[98].elemSize * busInfo[98].numElems);
	(void) memcpy(slx_mcconf + busInfo[99].offset, &_slx_mcconfBUS.gpd_buffer_notify_left, busInfo[99].elemSize * busInfo[99].numElems);
	(void) memcpy(slx_mcconf + busInfo[100].offset, &_slx_mcconfBUS.gpd_buffer_interpol, busInfo[100].elemSize * busInfo[100].numElems);
	(void) memcpy(slx_mcconf + busInfo[101].offset, &_slx_mcconfBUS.gpd_current_filter_const, busInfo[101].elemSize * busInfo[101].numElems);
	(void) memcpy(slx_mcconf + busInfo[102].offset, &_slx_mcconfBUS.gpd_current_kp, busInfo[102].elemSize * busInfo[102].numElems);
	(void) memcpy(slx_mcconf + busInfo[103].offset, &_slx_mcconfBUS.gpd_current_ki, busInfo[103].elemSize * busInfo[103].numElems);
	(void) memcpy(slx_mcconf + busInfo[104].offset, &_slx_mcconfBUS.s_pid_kp, busInfo[104].elemSize * busInfo[104].numElems);
	(void) memcpy(slx_mcconf + busInfo[105].offset, &_slx_mcconfBUS.s_pid_ki, busInfo[105].elemSize * busInfo[105].numElems);
	(void) memcpy(slx_mcconf + busInfo[106].offset, &_slx_mcconfBUS.s_pid_kd, busInfo[106].elemSize * busInfo[106].numElems);
	(void) memcpy(slx_mcconf + busInfo[107].offset, &_slx_mcconfBUS.s_pid_kd_filter, busInfo[107].elemSize * busInfo[107].numElems);
	(void) memcpy(slx_mcconf + busInfo[108].offset, &_slx_mcconfBUS.s_pid_min_erpm, busInfo[108].elemSize * busInfo[108].numElems);
	(void) memcpy(slx_mcconf + busInfo[109].offset, &_slx_mcconfBUS.s_pid_allow_braking, busInfo[109].elemSize * busInfo[109].numElems);
	(void) memcpy(slx_mcconf + busInfo[110].offset, &_slx_mcconfBUS.p_pid_kp, busInfo[110].elemSize * busInfo[110].numElems);
	(void) memcpy(slx_mcconf + busInfo[111].offset, &_slx_mcconfBUS.p_pid_ki, busInfo[111].elemSize * busInfo[111].numElems);
	(void) memcpy(slx_mcconf + busInfo[112].offset, &_slx_mcconfBUS.p_pid_kd, busInfo[112].elemSize * busInfo[112].numElems);
	(void) memcpy(slx_mcconf + busInfo[113].offset, &_slx_mcconfBUS.p_pid_kd_filter, busInfo[113].elemSize * busInfo[113].numElems);
	(void) memcpy(slx_mcconf + busInfo[114].offset, &_slx_mcconfBUS.p_pid_ang_div, busInfo[114].elemSize * busInfo[114].numElems);
	(void) memcpy(slx_mcconf + busInfo[115].offset, &_slx_mcconfBUS.cc_startup_boost_duty, busInfo[115].elemSize * busInfo[115].numElems);
	(void) memcpy(slx_mcconf + busInfo[116].offset, &_slx_mcconfBUS.cc_min_current, busInfo[116].elemSize * busInfo[116].numElems);
	(void) memcpy(slx_mcconf + busInfo[117].offset, &_slx_mcconfBUS.cc_gain, busInfo[117].elemSize * busInfo[117].numElems);
	(void) memcpy(slx_mcconf + busInfo[118].offset, &_slx_mcconfBUS.cc_ramp_step_max, busInfo[118].elemSize * busInfo[118].numElems);
	(void) memcpy(slx_mcconf + busInfo[119].offset, &_slx_mcconfBUS.m_fault_stop_time_ms, busInfo[119].elemSize * busInfo[119].numElems);
	(void) memcpy(slx_mcconf + busInfo[120].offset, &_slx_mcconfBUS.m_duty_ramp_step, busInfo[120].elemSize * busInfo[120].numElems);
	(void) memcpy(slx_mcconf + busInfo[121].offset, &_slx_mcconfBUS.m_current_backoff_gain, busInfo[121].elemSize * busInfo[121].numElems);
	(void) memcpy(slx_mcconf + busInfo[122].offset, &_slx_mcconfBUS.m_encoder_counts, busInfo[122].elemSize * busInfo[122].numElems);
	(void) memcpy(slx_mcconf + busInfo[123].offset, &_slx_mcconfBUS.m_sensor_port_mode, busInfo[123].elemSize * busInfo[123].numElems);
	(void) memcpy(slx_mcconf + busInfo[124].offset, &_slx_mcconfBUS.m_invert_direction, busInfo[124].elemSize * busInfo[124].numElems);
	(void) memcpy(slx_mcconf + busInfo[125].offset, &_slx_mcconfBUS.m_drv8301_oc_mode, busInfo[125].elemSize * busInfo[125].numElems);
	(void) memcpy(slx_mcconf + busInfo[126].offset, &_slx_mcconfBUS.m_drv8301_oc_adj, busInfo[126].elemSize * busInfo[126].numElems);
	(void) memcpy(slx_mcconf + busInfo[127].offset, &_slx_mcconfBUS.m_bldc_f_sw_min, busInfo[127].elemSize * busInfo[127].numElems);
	(void) memcpy(slx_mcconf + busInfo[128].offset, &_slx_mcconfBUS.m_bldc_f_sw_max, busInfo[128].elemSize * busInfo[128].numElems);
	(void) memcpy(slx_mcconf + busInfo[129].offset, &_slx_mcconfBUS.m_dc_f_sw, busInfo[129].elemSize * busInfo[129].numElems);
	(void) memcpy(slx_mcconf + busInfo[130].offset, &_slx_mcconfBUS.m_ntc_motor_beta, busInfo[130].elemSize * busInfo[130].numElems);
	(void) memcpy(slx_mcconf + busInfo[131].offset, &_slx_mcconfBUS.m_out_aux_mode, busInfo[131].elemSize * busInfo[131].numElems);
	(void) memcpy(slx_mcconf + busInfo[132].offset, &_slx_mcconfBUS.si_motor_poles, busInfo[132].elemSize * busInfo[132].numElems);
	(void) memcpy(slx_mcconf + busInfo[133].offset, &_slx_mcconfBUS.si_gear_ratio, busInfo[133].elemSize * busInfo[133].numElems);
	(void) memcpy(slx_mcconf + busInfo[134].offset, &_slx_mcconfBUS.si_wheel_diameter, busInfo[134].elemSize * busInfo[134].numElems);
	(void) memcpy(slx_mcconf + busInfo[135].offset, &_slx_mcconfBUS.si_battery_type, busInfo[135].elemSize * busInfo[135].numElems);
	(void) memcpy(slx_mcconf + busInfo[136].offset, &_slx_mcconfBUS.si_battery_cells, busInfo[136].elemSize * busInfo[136].numElems);
	(void) memcpy(slx_mcconf + busInfo[137].offset, &_slx_mcconfBUS.si_battery_ah, busInfo[137].elemSize * busInfo[137].numElems);

}

#define MDL_UPDATE  /* Change to #undef to remove function */
#if defined(MDL_UPDATE)
/* Function: mdlUpdate ======================================================
 * Abstract:
 *    This function is called once for every major integration time step.
 *    Discrete states are typically updated here, but this function is
 *    useful for performing any tasks that should only take place once per
 *    integration step.
 */
static void mdlUpdate(SimStruct *S, int_T tid)
{
    void **pW = ssGetPWork(S);
    const uint32_T *slx_mode = (uint32_T *) ssGetInputPortRealSignal(S, 0);
    const real_T *slx_pos_cmd = (real_T *) ssGetInputPortRealSignal(S, 1);
    const real_T *slx_current_cmd = (real_T *) ssGetInputPortRealSignal(S, 2);
    const real_T *slx_pos_pid_gains = (real_T *) ssGetInputPortRealSignal(S, 3);
    const real_T *slx_curr_lims = (real_T *) ssGetInputPortRealSignal(S, 4);
    char *slx_values = (char *) ssGetOutputPortSignal(S, 0);
    char *slx_mcconf = (char *) ssGetOutputPortSignal(S, 1);
    boolean_T *slx_mcconf_read = (boolean_T *) ssGetOutputPortRealSignal(S, 2);
    real_T *xD = ssGetDiscStates(S);
    const int_T   p_width0  = mxGetNumberOfElements(PARAM_DEF0(S));
    const uint8_T *vesc_dev = (const uint8_T *) mxGetData(PARAM_DEF0(S));
    
	busInfoStruct* busInfo = (busInfoStruct *) ssGetUserData(S);

	/* Temporary bus copy declarations */
	mc_values _slx_valuesBUS;
	mc_configuration _slx_mcconfBUS;

	/* Copy input bus into temporary structure */

    sf_vesc_usb_Update_wrapper(slx_mode, slx_pos_cmd, slx_current_cmd, slx_pos_pid_gains, slx_curr_lims, &_slx_valuesBUS, &_slx_mcconfBUS, slx_mcconf_read, xD, pW, vesc_dev, p_width0);

	/* Copy temporary structure into output bus */
	(void) memcpy(slx_values + busInfo[0].offset, &_slx_valuesBUS.v_in, busInfo[0].elemSize * busInfo[0].numElems);
	(void) memcpy(slx_values + busInfo[1].offset, &_slx_valuesBUS.id, busInfo[1].elemSize * busInfo[1].numElems);
	(void) memcpy(slx_values + busInfo[2].offset, &_slx_valuesBUS.iq, busInfo[2].elemSize * busInfo[2].numElems);
	(void) memcpy(slx_values + busInfo[3].offset, &_slx_valuesBUS.pid_pos, busInfo[3].elemSize * busInfo[3].numElems);
	(void) memcpy(slx_values + busInfo[4].offset, &_slx_valuesBUS.vesc_id, busInfo[4].elemSize * busInfo[4].numElems);
	(void) memcpy(slx_values + busInfo[5].offset, &_slx_valuesBUS.temp_motor, busInfo[5].elemSize * busInfo[5].numElems);
	(void) memcpy(slx_values + busInfo[6].offset, &_slx_valuesBUS.temp_mos1, busInfo[6].elemSize * busInfo[6].numElems);
	(void) memcpy(slx_values + busInfo[7].offset, &_slx_valuesBUS.temp_mos2, busInfo[7].elemSize * busInfo[7].numElems);
	(void) memcpy(slx_values + busInfo[8].offset, &_slx_valuesBUS.temp_mos3, busInfo[8].elemSize * busInfo[8].numElems);
	(void) memcpy(slx_values + busInfo[9].offset, &_slx_valuesBUS.temp_mos4, busInfo[9].elemSize * busInfo[9].numElems);
	(void) memcpy(slx_values + busInfo[10].offset, &_slx_valuesBUS.temp_mos5, busInfo[10].elemSize * busInfo[10].numElems);
	(void) memcpy(slx_values + busInfo[11].offset, &_slx_valuesBUS.temp_mos6, busInfo[11].elemSize * busInfo[11].numElems);
	(void) memcpy(slx_values + busInfo[12].offset, &_slx_valuesBUS.temp_pcb, busInfo[12].elemSize * busInfo[12].numElems);
	(void) memcpy(slx_values + busInfo[13].offset, &_slx_valuesBUS.current_motor, busInfo[13].elemSize * busInfo[13].numElems);
	(void) memcpy(slx_values + busInfo[14].offset, &_slx_valuesBUS.current_in, busInfo[14].elemSize * busInfo[14].numElems);
	(void) memcpy(slx_values + busInfo[15].offset, &_slx_valuesBUS.rpm, busInfo[15].elemSize * busInfo[15].numElems);
	(void) memcpy(slx_values + busInfo[16].offset, &_slx_valuesBUS.duty_now, busInfo[16].elemSize * busInfo[16].numElems);
	(void) memcpy(slx_values + busInfo[17].offset, &_slx_valuesBUS.amp_hours, busInfo[17].elemSize * busInfo[17].numElems);
	(void) memcpy(slx_values + busInfo[18].offset, &_slx_valuesBUS.amp_hours_charged, busInfo[18].elemSize * busInfo[18].numElems);
	(void) memcpy(slx_values + busInfo[19].offset, &_slx_valuesBUS.watt_hours, busInfo[19].elemSize * busInfo[19].numElems);
	(void) memcpy(slx_values + busInfo[20].offset, &_slx_valuesBUS.watt_hours_charged, busInfo[20].elemSize * busInfo[20].numElems);
	(void) memcpy(slx_values + busInfo[21].offset, &_slx_valuesBUS.tachometer, busInfo[21].elemSize * busInfo[21].numElems);
	(void) memcpy(slx_values + busInfo[22].offset, &_slx_valuesBUS.tachometer_abs, busInfo[22].elemSize * busInfo[22].numElems);
	(void) memcpy(slx_values + busInfo[23].offset, &_slx_valuesBUS.fault_code, busInfo[23].elemSize * busInfo[23].numElems);
	(void) memcpy(slx_mcconf + busInfo[24].offset, &_slx_mcconfBUS.pwm_mode, busInfo[24].elemSize * busInfo[24].numElems);
	(void) memcpy(slx_mcconf + busInfo[25].offset, &_slx_mcconfBUS.comm_mode, busInfo[25].elemSize * busInfo[25].numElems);
	(void) memcpy(slx_mcconf + busInfo[26].offset, &_slx_mcconfBUS.motor_type, busInfo[26].elemSize * busInfo[26].numElems);
	(void) memcpy(slx_mcconf + busInfo[27].offset, &_slx_mcconfBUS.sensor_mode, busInfo[27].elemSize * busInfo[27].numElems);
	(void) memcpy(slx_mcconf + busInfo[28].offset, &_slx_mcconfBUS.l_current_max, busInfo[28].elemSize * busInfo[28].numElems);
	(void) memcpy(slx_mcconf + busInfo[29].offset, &_slx_mcconfBUS.l_current_min, busInfo[29].elemSize * busInfo[29].numElems);
	(void) memcpy(slx_mcconf + busInfo[30].offset, &_slx_mcconfBUS.l_in_current_max, busInfo[30].elemSize * busInfo[30].numElems);
	(void) memcpy(slx_mcconf + busInfo[31].offset, &_slx_mcconfBUS.l_in_current_min, busInfo[31].elemSize * busInfo[31].numElems);
	(void) memcpy(slx_mcconf + busInfo[32].offset, &_slx_mcconfBUS.l_abs_current_max, busInfo[32].elemSize * busInfo[32].numElems);
	(void) memcpy(slx_mcconf + busInfo[33].offset, &_slx_mcconfBUS.l_min_erpm, busInfo[33].elemSize * busInfo[33].numElems);
	(void) memcpy(slx_mcconf + busInfo[34].offset, &_slx_mcconfBUS.l_max_erpm, busInfo[34].elemSize * busInfo[34].numElems);
	(void) memcpy(slx_mcconf + busInfo[35].offset, &_slx_mcconfBUS.l_erpm_start, busInfo[35].elemSize * busInfo[35].numElems);
	(void) memcpy(slx_mcconf + busInfo[36].offset, &_slx_mcconfBUS.l_max_erpm_fbrake, busInfo[36].elemSize * busInfo[36].numElems);
	(void) memcpy(slx_mcconf + busInfo[37].offset, &_slx_mcconfBUS.l_max_erpm_fbrake_cc, busInfo[37].elemSize * busInfo[37].numElems);
	(void) memcpy(slx_mcconf + busInfo[38].offset, &_slx_mcconfBUS.l_min_vin, busInfo[38].elemSize * busInfo[38].numElems);
	(void) memcpy(slx_mcconf + busInfo[39].offset, &_slx_mcconfBUS.l_max_vin, busInfo[39].elemSize * busInfo[39].numElems);
	(void) memcpy(slx_mcconf + busInfo[40].offset, &_slx_mcconfBUS.l_battery_cut_start, busInfo[40].elemSize * busInfo[40].numElems);
	(void) memcpy(slx_mcconf + busInfo[41].offset, &_slx_mcconfBUS.l_battery_cut_end, busInfo[41].elemSize * busInfo[41].numElems);
	(void) memcpy(slx_mcconf + busInfo[42].offset, &_slx_mcconfBUS.l_slow_abs_current, busInfo[42].elemSize * busInfo[42].numElems);
	(void) memcpy(slx_mcconf + busInfo[43].offset, &_slx_mcconfBUS.l_temp_fet_start, busInfo[43].elemSize * busInfo[43].numElems);
	(void) memcpy(slx_mcconf + busInfo[44].offset, &_slx_mcconfBUS.l_temp_fet_end, busInfo[44].elemSize * busInfo[44].numElems);
	(void) memcpy(slx_mcconf + busInfo[45].offset, &_slx_mcconfBUS.l_temp_motor_start, busInfo[45].elemSize * busInfo[45].numElems);
	(void) memcpy(slx_mcconf + busInfo[46].offset, &_slx_mcconfBUS.l_temp_motor_end, busInfo[46].elemSize * busInfo[46].numElems);
	(void) memcpy(slx_mcconf + busInfo[47].offset, &_slx_mcconfBUS.l_temp_accel_dec, busInfo[47].elemSize * busInfo[47].numElems);
	(void) memcpy(slx_mcconf + busInfo[48].offset, &_slx_mcconfBUS.l_min_duty, busInfo[48].elemSize * busInfo[48].numElems);
	(void) memcpy(slx_mcconf + busInfo[49].offset, &_slx_mcconfBUS.l_max_duty, busInfo[49].elemSize * busInfo[49].numElems);
	(void) memcpy(slx_mcconf + busInfo[50].offset, &_slx_mcconfBUS.l_watt_max, busInfo[50].elemSize * busInfo[50].numElems);
	(void) memcpy(slx_mcconf + busInfo[51].offset, &_slx_mcconfBUS.l_watt_min, busInfo[51].elemSize * busInfo[51].numElems);
	(void) memcpy(slx_mcconf + busInfo[52].offset, &_slx_mcconfBUS.l_current_max_scale, busInfo[52].elemSize * busInfo[52].numElems);
	(void) memcpy(slx_mcconf + busInfo[53].offset, &_slx_mcconfBUS.l_current_min_scale, busInfo[53].elemSize * busInfo[53].numElems);
	(void) memcpy(slx_mcconf + busInfo[54].offset, &_slx_mcconfBUS.lo_current_max, busInfo[54].elemSize * busInfo[54].numElems);
	(void) memcpy(slx_mcconf + busInfo[55].offset, &_slx_mcconfBUS.lo_current_min, busInfo[55].elemSize * busInfo[55].numElems);
	(void) memcpy(slx_mcconf + busInfo[56].offset, &_slx_mcconfBUS.lo_in_current_max, busInfo[56].elemSize * busInfo[56].numElems);
	(void) memcpy(slx_mcconf + busInfo[57].offset, &_slx_mcconfBUS.lo_in_current_min, busInfo[57].elemSize * busInfo[57].numElems);
	(void) memcpy(slx_mcconf + busInfo[58].offset, &_slx_mcconfBUS.lo_current_motor_max_now, busInfo[58].elemSize * busInfo[58].numElems);
	(void) memcpy(slx_mcconf + busInfo[59].offset, &_slx_mcconfBUS.lo_current_motor_min_now, busInfo[59].elemSize * busInfo[59].numElems);
	(void) memcpy(slx_mcconf + busInfo[60].offset, &_slx_mcconfBUS.sl_min_erpm, busInfo[60].elemSize * busInfo[60].numElems);
	(void) memcpy(slx_mcconf + busInfo[61].offset, &_slx_mcconfBUS.sl_min_erpm_cycle_int_limit, busInfo[61].elemSize * busInfo[61].numElems);
	(void) memcpy(slx_mcconf + busInfo[62].offset, &_slx_mcconfBUS.sl_max_fullbreak_current_dir_change, busInfo[62].elemSize * busInfo[62].numElems);
	(void) memcpy(slx_mcconf + busInfo[63].offset, &_slx_mcconfBUS.sl_cycle_int_limit, busInfo[63].elemSize * busInfo[63].numElems);
	(void) memcpy(slx_mcconf + busInfo[64].offset, &_slx_mcconfBUS.sl_phase_advance_at_br, busInfo[64].elemSize * busInfo[64].numElems);
	(void) memcpy(slx_mcconf + busInfo[65].offset, &_slx_mcconfBUS.sl_cycle_int_rpm_br, busInfo[65].elemSize * busInfo[65].numElems);
	(void) memcpy(slx_mcconf + busInfo[66].offset, &_slx_mcconfBUS.sl_bemf_coupling_k, busInfo[66].elemSize * busInfo[66].numElems);
	(void) memcpy(slx_mcconf + busInfo[67].offset, _slx_mcconfBUS.hall_table, busInfo[67].elemSize * busInfo[67].numElems);
	(void) memcpy(slx_mcconf + busInfo[68].offset, &_slx_mcconfBUS.hall_sl_erpm, busInfo[68].elemSize * busInfo[68].numElems);
	(void) memcpy(slx_mcconf + busInfo[69].offset, &_slx_mcconfBUS.foc_current_kp, busInfo[69].elemSize * busInfo[69].numElems);
	(void) memcpy(slx_mcconf + busInfo[70].offset, &_slx_mcconfBUS.foc_current_ki, busInfo[70].elemSize * busInfo[70].numElems);
	(void) memcpy(slx_mcconf + busInfo[71].offset, &_slx_mcconfBUS.foc_f_sw, busInfo[71].elemSize * busInfo[71].numElems);
	(void) memcpy(slx_mcconf + busInfo[72].offset, &_slx_mcconfBUS.foc_dt_us, busInfo[72].elemSize * busInfo[72].numElems);
	(void) memcpy(slx_mcconf + busInfo[73].offset, &_slx_mcconfBUS.foc_encoder_offset, busInfo[73].elemSize * busInfo[73].numElems);
	(void) memcpy(slx_mcconf + busInfo[74].offset, &_slx_mcconfBUS.foc_encoder_inverted, busInfo[74].elemSize * busInfo[74].numElems);
	(void) memcpy(slx_mcconf + busInfo[75].offset, &_slx_mcconfBUS.foc_encoder_ratio, busInfo[75].elemSize * busInfo[75].numElems);
	(void) memcpy(slx_mcconf + busInfo[76].offset, &_slx_mcconfBUS.foc_motor_l, busInfo[76].elemSize * busInfo[76].numElems);
	(void) memcpy(slx_mcconf + busInfo[77].offset, &_slx_mcconfBUS.foc_motor_r, busInfo[77].elemSize * busInfo[77].numElems);
	(void) memcpy(slx_mcconf + busInfo[78].offset, &_slx_mcconfBUS.foc_motor_flux_linkage, busInfo[78].elemSize * busInfo[78].numElems);
	(void) memcpy(slx_mcconf + busInfo[79].offset, &_slx_mcconfBUS.foc_observer_gain, busInfo[79].elemSize * busInfo[79].numElems);
	(void) memcpy(slx_mcconf + busInfo[80].offset, &_slx_mcconfBUS.foc_observer_gain_slow, busInfo[80].elemSize * busInfo[80].numElems);
	(void) memcpy(slx_mcconf + busInfo[81].offset, &_slx_mcconfBUS.foc_pll_kp, busInfo[81].elemSize * busInfo[81].numElems);
	(void) memcpy(slx_mcconf + busInfo[82].offset, &_slx_mcconfBUS.foc_pll_ki, busInfo[82].elemSize * busInfo[82].numElems);
	(void) memcpy(slx_mcconf + busInfo[83].offset, &_slx_mcconfBUS.foc_duty_dowmramp_kp, busInfo[83].elemSize * busInfo[83].numElems);
	(void) memcpy(slx_mcconf + busInfo[84].offset, &_slx_mcconfBUS.foc_duty_dowmramp_ki, busInfo[84].elemSize * busInfo[84].numElems);
	(void) memcpy(slx_mcconf + busInfo[85].offset, &_slx_mcconfBUS.foc_openloop_rpm, busInfo[85].elemSize * busInfo[85].numElems);
	(void) memcpy(slx_mcconf + busInfo[86].offset, &_slx_mcconfBUS.foc_sl_openloop_hyst, busInfo[86].elemSize * busInfo[86].numElems);
	(void) memcpy(slx_mcconf + busInfo[87].offset, &_slx_mcconfBUS.foc_sl_openloop_time, busInfo[87].elemSize * busInfo[87].numElems);
	(void) memcpy(slx_mcconf + busInfo[88].offset, &_slx_mcconfBUS.foc_sl_d_current_duty, busInfo[88].elemSize * busInfo[88].numElems);
	(void) memcpy(slx_mcconf + busInfo[89].offset, &_slx_mcconfBUS.foc_sl_d_current_factor, busInfo[89].elemSize * busInfo[89].numElems);
	(void) memcpy(slx_mcconf + busInfo[90].offset, &_slx_mcconfBUS.foc_sensor_mode, busInfo[90].elemSize * busInfo[90].numElems);
	(void) memcpy(slx_mcconf + busInfo[91].offset, _slx_mcconfBUS.foc_hall_table, busInfo[91].elemSize * busInfo[91].numElems);
	(void) memcpy(slx_mcconf + busInfo[92].offset, &_slx_mcconfBUS.foc_sl_erpm, busInfo[92].elemSize * busInfo[92].numElems);
	(void) memcpy(slx_mcconf + busInfo[93].offset, &_slx_mcconfBUS.foc_sample_v0_v7, busInfo[93].elemSize * busInfo[93].numElems);
	(void) memcpy(slx_mcconf + busInfo[94].offset, &_slx_mcconfBUS.foc_sample_high_current, busInfo[94].elemSize * busInfo[94].numElems);
	(void) memcpy(slx_mcconf + busInfo[95].offset, &_slx_mcconfBUS.foc_sat_comp, busInfo[95].elemSize * busInfo[95].numElems);
	(void) memcpy(slx_mcconf + busInfo[96].offset, &_slx_mcconfBUS.foc_temp_comp, busInfo[96].elemSize * busInfo[96].numElems);
	(void) memcpy(slx_mcconf + busInfo[97].offset, &_slx_mcconfBUS.foc_temp_comp_base_temp, busInfo[97].elemSize * busInfo[97].numElems);
	(void) memcpy(slx_mcconf + busInfo[98].offset, &_slx_mcconfBUS.foc_current_filter_const, busInfo[98].elemSize * busInfo[98].numElems);
	(void) memcpy(slx_mcconf + busInfo[99].offset, &_slx_mcconfBUS.gpd_buffer_notify_left, busInfo[99].elemSize * busInfo[99].numElems);
	(void) memcpy(slx_mcconf + busInfo[100].offset, &_slx_mcconfBUS.gpd_buffer_interpol, busInfo[100].elemSize * busInfo[100].numElems);
	(void) memcpy(slx_mcconf + busInfo[101].offset, &_slx_mcconfBUS.gpd_current_filter_const, busInfo[101].elemSize * busInfo[101].numElems);
	(void) memcpy(slx_mcconf + busInfo[102].offset, &_slx_mcconfBUS.gpd_current_kp, busInfo[102].elemSize * busInfo[102].numElems);
	(void) memcpy(slx_mcconf + busInfo[103].offset, &_slx_mcconfBUS.gpd_current_ki, busInfo[103].elemSize * busInfo[103].numElems);
	(void) memcpy(slx_mcconf + busInfo[104].offset, &_slx_mcconfBUS.s_pid_kp, busInfo[104].elemSize * busInfo[104].numElems);
	(void) memcpy(slx_mcconf + busInfo[105].offset, &_slx_mcconfBUS.s_pid_ki, busInfo[105].elemSize * busInfo[105].numElems);
	(void) memcpy(slx_mcconf + busInfo[106].offset, &_slx_mcconfBUS.s_pid_kd, busInfo[106].elemSize * busInfo[106].numElems);
	(void) memcpy(slx_mcconf + busInfo[107].offset, &_slx_mcconfBUS.s_pid_kd_filter, busInfo[107].elemSize * busInfo[107].numElems);
	(void) memcpy(slx_mcconf + busInfo[108].offset, &_slx_mcconfBUS.s_pid_min_erpm, busInfo[108].elemSize * busInfo[108].numElems);
	(void) memcpy(slx_mcconf + busInfo[109].offset, &_slx_mcconfBUS.s_pid_allow_braking, busInfo[109].elemSize * busInfo[109].numElems);
	(void) memcpy(slx_mcconf + busInfo[110].offset, &_slx_mcconfBUS.p_pid_kp, busInfo[110].elemSize * busInfo[110].numElems);
	(void) memcpy(slx_mcconf + busInfo[111].offset, &_slx_mcconfBUS.p_pid_ki, busInfo[111].elemSize * busInfo[111].numElems);
	(void) memcpy(slx_mcconf + busInfo[112].offset, &_slx_mcconfBUS.p_pid_kd, busInfo[112].elemSize * busInfo[112].numElems);
	(void) memcpy(slx_mcconf + busInfo[113].offset, &_slx_mcconfBUS.p_pid_kd_filter, busInfo[113].elemSize * busInfo[113].numElems);
	(void) memcpy(slx_mcconf + busInfo[114].offset, &_slx_mcconfBUS.p_pid_ang_div, busInfo[114].elemSize * busInfo[114].numElems);
	(void) memcpy(slx_mcconf + busInfo[115].offset, &_slx_mcconfBUS.cc_startup_boost_duty, busInfo[115].elemSize * busInfo[115].numElems);
	(void) memcpy(slx_mcconf + busInfo[116].offset, &_slx_mcconfBUS.cc_min_current, busInfo[116].elemSize * busInfo[116].numElems);
	(void) memcpy(slx_mcconf + busInfo[117].offset, &_slx_mcconfBUS.cc_gain, busInfo[117].elemSize * busInfo[117].numElems);
	(void) memcpy(slx_mcconf + busInfo[118].offset, &_slx_mcconfBUS.cc_ramp_step_max, busInfo[118].elemSize * busInfo[118].numElems);
	(void) memcpy(slx_mcconf + busInfo[119].offset, &_slx_mcconfBUS.m_fault_stop_time_ms, busInfo[119].elemSize * busInfo[119].numElems);
	(void) memcpy(slx_mcconf + busInfo[120].offset, &_slx_mcconfBUS.m_duty_ramp_step, busInfo[120].elemSize * busInfo[120].numElems);
	(void) memcpy(slx_mcconf + busInfo[121].offset, &_slx_mcconfBUS.m_current_backoff_gain, busInfo[121].elemSize * busInfo[121].numElems);
	(void) memcpy(slx_mcconf + busInfo[122].offset, &_slx_mcconfBUS.m_encoder_counts, busInfo[122].elemSize * busInfo[122].numElems);
	(void) memcpy(slx_mcconf + busInfo[123].offset, &_slx_mcconfBUS.m_sensor_port_mode, busInfo[123].elemSize * busInfo[123].numElems);
	(void) memcpy(slx_mcconf + busInfo[124].offset, &_slx_mcconfBUS.m_invert_direction, busInfo[124].elemSize * busInfo[124].numElems);
	(void) memcpy(slx_mcconf + busInfo[125].offset, &_slx_mcconfBUS.m_drv8301_oc_mode, busInfo[125].elemSize * busInfo[125].numElems);
	(void) memcpy(slx_mcconf + busInfo[126].offset, &_slx_mcconfBUS.m_drv8301_oc_adj, busInfo[126].elemSize * busInfo[126].numElems);
	(void) memcpy(slx_mcconf + busInfo[127].offset, &_slx_mcconfBUS.m_bldc_f_sw_min, busInfo[127].elemSize * busInfo[127].numElems);
	(void) memcpy(slx_mcconf + busInfo[128].offset, &_slx_mcconfBUS.m_bldc_f_sw_max, busInfo[128].elemSize * busInfo[128].numElems);
	(void) memcpy(slx_mcconf + busInfo[129].offset, &_slx_mcconfBUS.m_dc_f_sw, busInfo[129].elemSize * busInfo[129].numElems);
	(void) memcpy(slx_mcconf + busInfo[130].offset, &_slx_mcconfBUS.m_ntc_motor_beta, busInfo[130].elemSize * busInfo[130].numElems);
	(void) memcpy(slx_mcconf + busInfo[131].offset, &_slx_mcconfBUS.m_out_aux_mode, busInfo[131].elemSize * busInfo[131].numElems);
	(void) memcpy(slx_mcconf + busInfo[132].offset, &_slx_mcconfBUS.si_motor_poles, busInfo[132].elemSize * busInfo[132].numElems);
	(void) memcpy(slx_mcconf + busInfo[133].offset, &_slx_mcconfBUS.si_gear_ratio, busInfo[133].elemSize * busInfo[133].numElems);
	(void) memcpy(slx_mcconf + busInfo[134].offset, &_slx_mcconfBUS.si_wheel_diameter, busInfo[134].elemSize * busInfo[134].numElems);
	(void) memcpy(slx_mcconf + busInfo[135].offset, &_slx_mcconfBUS.si_battery_type, busInfo[135].elemSize * busInfo[135].numElems);
	(void) memcpy(slx_mcconf + busInfo[136].offset, &_slx_mcconfBUS.si_battery_cells, busInfo[136].elemSize * busInfo[136].numElems);
	(void) memcpy(slx_mcconf + busInfo[137].offset, &_slx_mcconfBUS.si_battery_ah, busInfo[137].elemSize * busInfo[137].numElems);

}
#endif /* MDL_UPDATE */
/* Function: mdlTerminate =====================================================
 * Abstract:
 *    In this function, you should perform any actions that are necessary
 *    at the termination of a simulation.  For example, if memory was
 *    allocated in mdlStart, this is the place to free it.
 */
static void mdlTerminate(SimStruct *S)
{
    void **pW = ssGetPWork(S);
    real_T *xD = ssGetDiscStates(S);
    const int_T   p_width0  = mxGetNumberOfElements(PARAM_DEF0(S));
    const uint8_T *vesc_dev = (const uint8_T *) mxGetData(PARAM_DEF0(S));
    
    sf_vesc_usb_Terminate_wrapper(xD, pW, vesc_dev, p_width0);
    /* Free stored bus information */
    busInfoStruct *busInfo = (busInfoStruct *) ssGetUserData(S);
    if(busInfo != NULL) {
        free(busInfo);
    }

}

static int_T GetRTWEnvironmentMode(SimStruct *S)
{
    int_T status = -1;
    mxArray *plhs[1];
    mxArray *prhs[1];
    mxArray * err;
    
    /*
     * Get the name of the Simulink block diagram
     */
    prhs[0] = mxCreateString(ssGetModelName(ssGetRootSS(S)));
    plhs[0] = NULL;
    
    /*
     * Call "isSimulationTarget = rtwenvironmentmode(modelName)" in MATLAB
     */
    err = mexCallMATLABWithTrap(1, plhs, 1, prhs, "rtwenvironmentmode");
    mxDestroyArray(prhs[0]);
    
    /*
     * Set the error status if an error occurred
     */
    if (err) {
        if (plhs[0]) {
            mxDestroyArray(plhs[0]);
            plhs[0] = NULL;
        }
        ssSetErrorStatus(S, "Unknown error during call to 'rtwenvironmentmode'.");
        return -1;
    }
    
    /*
     * Get the value returned by rtwenvironmentmode(modelName)
    */
    if (plhs[0]) {
        status = (int_T) (mxGetScalar(plhs[0]) != 0);
        mxDestroyArray(plhs[0]);
        plhs[0] = NULL;
    }
    
    return (status);
}

#ifdef  MATLAB_MEX_FILE    /* Is this file being compiled as a MEX-file? */
#include "simulink.c"      /* MEX-file interface mechanism */
#else
#include "cg_sfun.h"       /* Code generation registration function */
#endif



