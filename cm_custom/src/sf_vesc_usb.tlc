%% File : sf_vesc_usb.tlc
%% Created : Tue Aug 27 09:09:29 2019
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "sf_vesc_usb.cpp".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  sf_vesc_usb "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output

  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    %assign hFileName = "sf_vesc_usb_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #include "tmwtypes.h"
    extern void sf_vesc_usb_Start_wrapper_accel(real_T *xD,
			void **pW,
			const uint8_T *vesc_dev, const int_T p_width0);
    extern void sf_vesc_usb_Outputs_wrapper_accel(void *slx_values, void *__slx_valuesBUS,
			void *slx_mcconf, void *__slx_mcconfBUS,
			boolean_T *slx_mcconf_read,
			const real_T *xD,
			void **pW,
			const uint8_T *vesc_dev, const int_T p_width0);
    extern void sf_vesc_usb_Update_wrapper_accel(const uint32_T *slx_mode,
			const real_T *slx_pos_cmd,
			const real_T *slx_current_cmd,
			const real_T *slx_pos_pid_gains,
			const real_T *slx_curr_lims,
			void *slx_values, void *__slx_valuesBUS,
			void *slx_mcconf, void *__slx_mcconfBUS,
			boolean_T *slx_mcconf_read,
			real_T *xD,
			void **pW,
			const uint8_T *vesc_dev, const int_T p_width0);
    extern void sf_vesc_usb_Terminate_wrapper_accel(real_T *xD,
			void **pW,
			const uint8_T *vesc_dev, const int_T p_width0);
    #endif
    %closefile hFile

    %assign cFileName = "sf_vesc_usb_accel_wrapper"
    %openfile cFile = "%<cFileName>.c"
    %selectfile cFile
    #include <string.h>
    #include "tmwtypes.h"
    #include "datatypes.h"

    void sf_vesc_usb_Start_wrapper_accel(real_T *xD,
			void **pW,
			const uint8_T *vesc_dev, const int_T p_width0){
    sf_vesc_usb_Start_wrapper(xD,
			pW,
			vesc_dev, p_width0);
    }
    void sf_vesc_usb_Outputs_wrapper_accel(void *slx_values, void *__slx_valuesBUS,
			void *slx_mcconf, void *__slx_mcconfBUS,
			boolean_T *slx_mcconf_read,
			const real_T *xD,
			void **pW,
			const uint8_T *vesc_dev, const int_T p_width0){
    sf_vesc_usb_Outputs_wrapper((mc_values *) __slx_valuesBUS,
			(mc_configuration *) __slx_mcconfBUS,
			slx_mcconf_read,
			xD,
			pW,
			vesc_dev, p_width0);

    %assign dTypeId = LibBlockOutputSignalDataTypeId(0)
    %<SLibAssignUserStructToSLStruct(dTypeId, "(char *) slx_values", "(*(mc_values *) __slx_valuesBUS)", 0)>

    %assign dTypeId = LibBlockOutputSignalDataTypeId(1)
    %<SLibAssignUserStructToSLStruct(dTypeId, "(char *) slx_mcconf", "(*(mc_configuration *) __slx_mcconfBUS)", 1)>
    }

    void sf_vesc_usb_Update_wrapper_accel(const uint32_T *slx_mode,
			const real_T *slx_pos_cmd,
			const real_T *slx_current_cmd,
			const real_T *slx_pos_pid_gains,
			const real_T *slx_curr_lims,
			void *slx_values, void *__slx_valuesBUS,
			void *slx_mcconf, void *__slx_mcconfBUS,
			boolean_T *slx_mcconf_read,
			real_T *xD,
			void **pW,
			const uint8_T *vesc_dev, const int_T p_width0){
    sf_vesc_usb_Update_wrapper(slx_mode,
			slx_pos_cmd,
			slx_current_cmd,
			slx_pos_pid_gains,
			slx_curr_lims,
			(mc_values *) __slx_valuesBUS,
			(mc_configuration *) __slx_mcconfBUS,
			slx_mcconf_read,
			xD,
			pW,
			vesc_dev, p_width0);

    %assign dTypeId = LibBlockOutputSignalDataTypeId(0)
    %<SLibAssignUserStructToSLStruct(dTypeId, "(char *) slx_values", "(*(mc_values *) __slx_valuesBUS)", 0)>

    %assign dTypeId = LibBlockOutputSignalDataTypeId(1)
    %<SLibAssignUserStructToSLStruct(dTypeId, "(char *) slx_mcconf", "(*(mc_configuration *) __slx_mcconfBUS)", 1)>
    }
    void sf_vesc_usb_Terminate_wrapper_accel(real_T *xD,
			void **pW,
			const uint8_T *vesc_dev, const int_T p_width0){
    sf_vesc_usb_Terminate_wrapper(xD,
			pW,
			vesc_dev, p_width0);
    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>
    %<LibAddToModelSources("%<cFileName>")>

  %else
  %openfile externs


    extern void sf_vesc_usb_Start_wrapper(real_T *xD,
			void **pW,
			const uint8_T *vesc_dev, const int_T p_width0);

    extern void sf_vesc_usb_Outputs_wrapper(mc_values *slx_values,
			mc_configuration *slx_mcconf,
			boolean_T *slx_mcconf_read,
			const real_T *xD,
			void **pW,
			const uint8_T *vesc_dev, const int_T p_width0);
    extern void sf_vesc_usb_Update_wrapper(const uint32_T *slx_mode,
			const real_T *slx_pos_cmd,
			const real_T *slx_current_cmd,
			const real_T *slx_pos_pid_gains,
			const real_T *slx_curr_lims,
			mc_values *slx_values,
			mc_configuration *slx_mcconf,
			boolean_T *slx_mcconf_read,
			real_T *xD,
			void **pW,
			const uint8_T *vesc_dev, const int_T p_width0);

    extern void sf_vesc_usb_Terminate_wrapper(real_T *xD,
			void **pW,
			const uint8_T *vesc_dev, const int_T p_width0);

  %closefile externs
  %<LibCacheExtern(externs)>

  %endif
  %%
%endfunction

%% InitializeConditions =========================================================
%%
%function InitializeConditions(block, system) Output
  /* %<Type> Block: %<Name> */
{
  real_T initVector[1] = {0};
  %assign rollVars = ["<dwork>/DSTATE"]
  %assign rollRegions = [0:%<LibBlockDWorkWidth(DSTATE)-1>]
  %roll sigIdx = rollRegions, lcv = 1, block, "Roller", rollVars
    %if %<LibBlockDWorkWidth(DSTATE)> == 1
      %<LibBlockDWork(DSTATE, "", lcv, sigIdx)> = initVector[0];
    %else
      %<LibBlockDWork(DSTATE, "", lcv, sigIdx)> = initVector[%<lcv>];
    %endif
  %endroll
}


%endfunction

%% Function: Start ============================================================
%%
%function Start(block, system) Output
   /* %<Type> Block: %<Name> */
  %assign ppw = LibBlockDWorkAddr(PWORK, "", "", 0)
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  sf_vesc_usb_Start_wrapper(%<pxd>, %<ppw>, %<pp1>, %<param_width1>);
%endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign ppw = LibBlockDWorkAddr(PWORK, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    %assign slx_valuesBUS_ptr = LibBlockDWorkAddr(slx_valuesBUS, "", "", 0)
    %assign slx_mcconfBUS_ptr = LibBlockDWorkAddr(slx_mcconfBUS, "", "", 0)
    sf_vesc_usb_Outputs_wrapper_accel(%<py0>, %<slx_valuesBUS_ptr>, %<py1>, %<slx_mcconfBUS_ptr>, %<py2>, %<pxd>, %<ppw>, %<pp1>, %<param_width1>);
  %else
    sf_vesc_usb_Outputs_wrapper(%<py0>, %<py1>, %<py2>, %<pxd>, %<ppw>, %<pp1>, %<param_width1>);
  %endif

  %%
%endfunction

%% Function: Update ==========================================================
%% Abstract:
%%    Update
%%
%%
%function Update(block, system) Output
    /* S-Function "sf_vesc_usb_wrapper" Block: %<Name> */
  %assign ppw = LibBlockDWorkAddr(PWORK, "", "", 0)
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign pu3 = LibBlockInputSignalAddr(3, "", "", 0)
  %assign pu4 = LibBlockInputSignalAddr(4, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
    %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    %assign slx_valuesBUS_ptr = LibBlockDWorkAddr(slx_valuesBUS, "", "", 0)
    %assign slx_mcconfBUS_ptr = LibBlockDWorkAddr(slx_mcconfBUS, "", "", 0)
    sf_vesc_usb_Update_wrapper_accel(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<pu4>, %<py0>, %<slx_valuesBUS_ptr>, %<py1>, %<slx_mcconfBUS_ptr>, %<py2>, %<pxd>, %<ppw>, %<pp1>, %<param_width1>);
  %else
    sf_vesc_usb_Update_wrapper(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<pu4>, %<py0>, %<py1>, %<py2>, %<pxd>, %<ppw>, %<pp1>, %<param_width1>);
  %endif

  %%
%endfunction
%% Function: Terminate ========================================================
%%
%function Terminate(block, system) Output
   /* %<Type> Block: %<Name> */
  %assign ppw = LibBlockDWorkAddr(PWORK, "", "", 0)
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  sf_vesc_usb_Terminate_wrapper(%<pxd>, %<ppw>, %<pp1>, %<param_width1>);
%endfunction

%% [EOF] sf_vesc_usb.tlc

